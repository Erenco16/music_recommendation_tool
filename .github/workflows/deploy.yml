name: Deploy Flask API to AWS

on:
  push:
    branches:
      - main  # Triggers deployment on merge to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build and Push Docker Image to ECR
      run: |
        IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    - name: SSH into EC2 and Deploy
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_INSTANCE_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Login to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          
          # Clean up unused images and containers on EC2
          docker image prune -af
          docker container prune -f
          
          # Remove existing container if it exists
          if docker ps -a --format '{{.Names}}' | grep -Eq '^flask_server$'; then
            docker stop flask_server
            docker rm flask_server
          fi

          # Pull latest image and run it
          IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          docker pull $IMAGE
          docker run -d --name flask_server -p 5001:5001 $IMAGE
